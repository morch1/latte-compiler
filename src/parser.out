Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmts
Rule 2     stmts -> stmt stmts
Rule 3     stmts -> <empty>
Rule 4     block -> lbracket stmts rbracket
Rule 5     stmt -> block
Rule 6     type -> int
Rule 7     type -> string
Rule 8     type -> boolean
Rule 9     type -> void
Rule 10    items -> item comma items
Rule 11    items -> item
Rule 12    item -> id
Rule 13    item -> id equals exp
Rule 14    stmt -> type items semi
Rule 15    stmt -> id equals exp semi
Rule 16    stmt -> exp semi
Rule 17    exp -> exp1 or exp
Rule 18    exp1 -> exp2 and exp1
Rule 19    exp2 -> exp2 lt exp3
Rule 20    exp2 -> exp2 le exp3
Rule 21    exp2 -> exp2 gt exp3
Rule 22    exp2 -> exp2 ge exp3
Rule 23    exp2 -> exp2 eq exp3
Rule 24    exp2 -> exp2 ne exp3
Rule 25    exp3 -> exp3 plus exp4
Rule 26    exp3 -> exp3 minus exp4
Rule 27    exp4 -> exp4 times exp5
Rule 28    exp4 -> exp4 divide exp5
Rule 29    exp4 -> exp4 mod exp5
Rule 30    exp5 -> minus exp6
Rule 31    exp5 -> not exp6
Rule 32    exp6 -> id
Rule 33    exp6 -> num
Rule 34    exp -> exp1
Rule 35    exp1 -> exp2
Rule 36    exp2 -> exp3
Rule 37    exp3 -> exp4
Rule 38    exp4 -> exp5
Rule 39    exp5 -> exp6
Rule 40    exp6 -> lparen exp rparen

Terminals, with rules where they appear

and                  : 18
boolean              : 8
comma                : 10
divide               : 28
eq                   : 23
equals               : 13 15
error                : 
ge                   : 22
gt                   : 21
id                   : 12 13 15 32
int                  : 6
lbracket             : 4
le                   : 20
lparen               : 40
lt                   : 19
minus                : 26 30
mod                  : 29
ne                   : 24
not                  : 31
num                  : 33
or                   : 17
plus                 : 25
rbracket             : 4
rparen               : 40
semi                 : 14 15 16
string               : 7
times                : 27
void                 : 9

Nonterminals, with rules where they appear

block                : 5
exp                  : 13 15 16 17 40
exp1                 : 17 18 34
exp2                 : 18 19 20 21 22 23 24 35
exp3                 : 19 20 21 22 23 24 25 26 36
exp4                 : 25 26 27 28 29 37
exp5                 : 27 28 29 38
exp6                 : 30 31 39
item                 : 10 11
items                : 10 14
program              : 0
stmt                 : 2
stmts                : 1 2 4
type                 : 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmts
    (2) stmts -> . stmt stmts
    (3) stmts -> .
    (5) stmt -> . block
    (14) stmt -> . type items semi
    (15) stmt -> . id equals exp semi
    (16) stmt -> . exp semi
    (4) block -> . lbracket stmts rbracket
    (6) type -> . int
    (7) type -> . string
    (8) type -> . boolean
    (9) type -> . void
    (17) exp -> . exp1 or exp
    (34) exp -> . exp1
    (18) exp1 -> . exp2 and exp1
    (35) exp1 -> . exp2
    (19) exp2 -> . exp2 lt exp3
    (20) exp2 -> . exp2 le exp3
    (21) exp2 -> . exp2 gt exp3
    (22) exp2 -> . exp2 ge exp3
    (23) exp2 -> . exp2 eq exp3
    (24) exp2 -> . exp2 ne exp3
    (36) exp2 -> . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    $end            reduce using rule 3 (stmts -> .)
    id              shift and go to state 6
    lbracket        shift and go to state 8
    int             shift and go to state 9
    string          shift and go to state 10
    boolean         shift and go to state 11
    void            shift and go to state 12
    minus           shift and go to state 17
    not             shift and go to state 20
    num             shift and go to state 21
    lparen          shift and go to state 22

    program                        shift and go to state 1
    stmts                          shift and go to state 2
    stmt                           shift and go to state 3
    block                          shift and go to state 4
    type                           shift and go to state 5
    exp                            shift and go to state 7
    exp1                           shift and go to state 13
    exp2                           shift and go to state 14
    exp3                           shift and go to state 15
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> stmts .

    $end            reduce using rule 1 (program -> stmts .)


state 3

    (2) stmts -> stmt . stmts
    (2) stmts -> . stmt stmts
    (3) stmts -> .
    (5) stmt -> . block
    (14) stmt -> . type items semi
    (15) stmt -> . id equals exp semi
    (16) stmt -> . exp semi
    (4) block -> . lbracket stmts rbracket
    (6) type -> . int
    (7) type -> . string
    (8) type -> . boolean
    (9) type -> . void
    (17) exp -> . exp1 or exp
    (34) exp -> . exp1
    (18) exp1 -> . exp2 and exp1
    (35) exp1 -> . exp2
    (19) exp2 -> . exp2 lt exp3
    (20) exp2 -> . exp2 le exp3
    (21) exp2 -> . exp2 gt exp3
    (22) exp2 -> . exp2 ge exp3
    (23) exp2 -> . exp2 eq exp3
    (24) exp2 -> . exp2 ne exp3
    (36) exp2 -> . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    $end            reduce using rule 3 (stmts -> .)
    rbracket        reduce using rule 3 (stmts -> .)
    id              shift and go to state 6
    lbracket        shift and go to state 8
    int             shift and go to state 9
    string          shift and go to state 10
    boolean         shift and go to state 11
    void            shift and go to state 12
    minus           shift and go to state 17
    not             shift and go to state 20
    num             shift and go to state 21
    lparen          shift and go to state 22

    stmt                           shift and go to state 3
    stmts                          shift and go to state 23
    block                          shift and go to state 4
    type                           shift and go to state 5
    exp                            shift and go to state 7
    exp1                           shift and go to state 13
    exp2                           shift and go to state 14
    exp3                           shift and go to state 15
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 4

    (5) stmt -> block .

    id              reduce using rule 5 (stmt -> block .)
    lbracket        reduce using rule 5 (stmt -> block .)
    int             reduce using rule 5 (stmt -> block .)
    string          reduce using rule 5 (stmt -> block .)
    boolean         reduce using rule 5 (stmt -> block .)
    void            reduce using rule 5 (stmt -> block .)
    minus           reduce using rule 5 (stmt -> block .)
    not             reduce using rule 5 (stmt -> block .)
    num             reduce using rule 5 (stmt -> block .)
    lparen          reduce using rule 5 (stmt -> block .)
    $end            reduce using rule 5 (stmt -> block .)
    rbracket        reduce using rule 5 (stmt -> block .)


state 5

    (14) stmt -> type . items semi
    (10) items -> . item comma items
    (11) items -> . item
    (12) item -> . id
    (13) item -> . id equals exp

    id              shift and go to state 26

    items                          shift and go to state 24
    item                           shift and go to state 25

state 6

    (15) stmt -> id . equals exp semi
    (32) exp6 -> id .

    equals          shift and go to state 27
    times           reduce using rule 32 (exp6 -> id .)
    divide          reduce using rule 32 (exp6 -> id .)
    mod             reduce using rule 32 (exp6 -> id .)
    plus            reduce using rule 32 (exp6 -> id .)
    minus           reduce using rule 32 (exp6 -> id .)
    and             reduce using rule 32 (exp6 -> id .)
    lt              reduce using rule 32 (exp6 -> id .)
    le              reduce using rule 32 (exp6 -> id .)
    gt              reduce using rule 32 (exp6 -> id .)
    ge              reduce using rule 32 (exp6 -> id .)
    eq              reduce using rule 32 (exp6 -> id .)
    ne              reduce using rule 32 (exp6 -> id .)
    or              reduce using rule 32 (exp6 -> id .)
    semi            reduce using rule 32 (exp6 -> id .)


state 7

    (16) stmt -> exp . semi

    semi            shift and go to state 28


state 8

    (4) block -> lbracket . stmts rbracket
    (2) stmts -> . stmt stmts
    (3) stmts -> .
    (5) stmt -> . block
    (14) stmt -> . type items semi
    (15) stmt -> . id equals exp semi
    (16) stmt -> . exp semi
    (4) block -> . lbracket stmts rbracket
    (6) type -> . int
    (7) type -> . string
    (8) type -> . boolean
    (9) type -> . void
    (17) exp -> . exp1 or exp
    (34) exp -> . exp1
    (18) exp1 -> . exp2 and exp1
    (35) exp1 -> . exp2
    (19) exp2 -> . exp2 lt exp3
    (20) exp2 -> . exp2 le exp3
    (21) exp2 -> . exp2 gt exp3
    (22) exp2 -> . exp2 ge exp3
    (23) exp2 -> . exp2 eq exp3
    (24) exp2 -> . exp2 ne exp3
    (36) exp2 -> . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    rbracket        reduce using rule 3 (stmts -> .)
    id              shift and go to state 6
    lbracket        shift and go to state 8
    int             shift and go to state 9
    string          shift and go to state 10
    boolean         shift and go to state 11
    void            shift and go to state 12
    minus           shift and go to state 17
    not             shift and go to state 20
    num             shift and go to state 21
    lparen          shift and go to state 22

    stmts                          shift and go to state 29
    stmt                           shift and go to state 3
    block                          shift and go to state 4
    type                           shift and go to state 5
    exp                            shift and go to state 7
    exp1                           shift and go to state 13
    exp2                           shift and go to state 14
    exp3                           shift and go to state 15
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 9

    (6) type -> int .

    id              reduce using rule 6 (type -> int .)


state 10

    (7) type -> string .

    id              reduce using rule 7 (type -> string .)


state 11

    (8) type -> boolean .

    id              reduce using rule 8 (type -> boolean .)


state 12

    (9) type -> void .

    id              reduce using rule 9 (type -> void .)


state 13

    (17) exp -> exp1 . or exp
    (34) exp -> exp1 .

    or              shift and go to state 30
    semi            reduce using rule 34 (exp -> exp1 .)
    rparen          reduce using rule 34 (exp -> exp1 .)
    comma           reduce using rule 34 (exp -> exp1 .)


state 14

    (18) exp1 -> exp2 . and exp1
    (35) exp1 -> exp2 .
    (19) exp2 -> exp2 . lt exp3
    (20) exp2 -> exp2 . le exp3
    (21) exp2 -> exp2 . gt exp3
    (22) exp2 -> exp2 . ge exp3
    (23) exp2 -> exp2 . eq exp3
    (24) exp2 -> exp2 . ne exp3

    and             shift and go to state 31
    or              reduce using rule 35 (exp1 -> exp2 .)
    semi            reduce using rule 35 (exp1 -> exp2 .)
    rparen          reduce using rule 35 (exp1 -> exp2 .)
    comma           reduce using rule 35 (exp1 -> exp2 .)
    lt              shift and go to state 32
    le              shift and go to state 33
    gt              shift and go to state 34
    ge              shift and go to state 35
    eq              shift and go to state 36
    ne              shift and go to state 37


state 15

    (36) exp2 -> exp3 .
    (25) exp3 -> exp3 . plus exp4
    (26) exp3 -> exp3 . minus exp4

    and             reduce using rule 36 (exp2 -> exp3 .)
    lt              reduce using rule 36 (exp2 -> exp3 .)
    le              reduce using rule 36 (exp2 -> exp3 .)
    gt              reduce using rule 36 (exp2 -> exp3 .)
    ge              reduce using rule 36 (exp2 -> exp3 .)
    eq              reduce using rule 36 (exp2 -> exp3 .)
    ne              reduce using rule 36 (exp2 -> exp3 .)
    or              reduce using rule 36 (exp2 -> exp3 .)
    semi            reduce using rule 36 (exp2 -> exp3 .)
    rparen          reduce using rule 36 (exp2 -> exp3 .)
    comma           reduce using rule 36 (exp2 -> exp3 .)
    plus            shift and go to state 38
    minus           shift and go to state 39


state 16

    (37) exp3 -> exp4 .
    (27) exp4 -> exp4 . times exp5
    (28) exp4 -> exp4 . divide exp5
    (29) exp4 -> exp4 . mod exp5

    plus            reduce using rule 37 (exp3 -> exp4 .)
    minus           reduce using rule 37 (exp3 -> exp4 .)
    and             reduce using rule 37 (exp3 -> exp4 .)
    lt              reduce using rule 37 (exp3 -> exp4 .)
    le              reduce using rule 37 (exp3 -> exp4 .)
    gt              reduce using rule 37 (exp3 -> exp4 .)
    ge              reduce using rule 37 (exp3 -> exp4 .)
    eq              reduce using rule 37 (exp3 -> exp4 .)
    ne              reduce using rule 37 (exp3 -> exp4 .)
    or              reduce using rule 37 (exp3 -> exp4 .)
    semi            reduce using rule 37 (exp3 -> exp4 .)
    rparen          reduce using rule 37 (exp3 -> exp4 .)
    comma           reduce using rule 37 (exp3 -> exp4 .)
    times           shift and go to state 40
    divide          shift and go to state 41
    mod             shift and go to state 42


state 17

    (30) exp5 -> minus . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp6                           shift and go to state 43

state 18

    (38) exp4 -> exp5 .

    times           reduce using rule 38 (exp4 -> exp5 .)
    divide          reduce using rule 38 (exp4 -> exp5 .)
    mod             reduce using rule 38 (exp4 -> exp5 .)
    plus            reduce using rule 38 (exp4 -> exp5 .)
    minus           reduce using rule 38 (exp4 -> exp5 .)
    and             reduce using rule 38 (exp4 -> exp5 .)
    lt              reduce using rule 38 (exp4 -> exp5 .)
    le              reduce using rule 38 (exp4 -> exp5 .)
    gt              reduce using rule 38 (exp4 -> exp5 .)
    ge              reduce using rule 38 (exp4 -> exp5 .)
    eq              reduce using rule 38 (exp4 -> exp5 .)
    ne              reduce using rule 38 (exp4 -> exp5 .)
    or              reduce using rule 38 (exp4 -> exp5 .)
    semi            reduce using rule 38 (exp4 -> exp5 .)
    rparen          reduce using rule 38 (exp4 -> exp5 .)
    comma           reduce using rule 38 (exp4 -> exp5 .)


state 19

    (39) exp5 -> exp6 .

    times           reduce using rule 39 (exp5 -> exp6 .)
    divide          reduce using rule 39 (exp5 -> exp6 .)
    mod             reduce using rule 39 (exp5 -> exp6 .)
    plus            reduce using rule 39 (exp5 -> exp6 .)
    minus           reduce using rule 39 (exp5 -> exp6 .)
    and             reduce using rule 39 (exp5 -> exp6 .)
    lt              reduce using rule 39 (exp5 -> exp6 .)
    le              reduce using rule 39 (exp5 -> exp6 .)
    gt              reduce using rule 39 (exp5 -> exp6 .)
    ge              reduce using rule 39 (exp5 -> exp6 .)
    eq              reduce using rule 39 (exp5 -> exp6 .)
    ne              reduce using rule 39 (exp5 -> exp6 .)
    or              reduce using rule 39 (exp5 -> exp6 .)
    semi            reduce using rule 39 (exp5 -> exp6 .)
    rparen          reduce using rule 39 (exp5 -> exp6 .)
    comma           reduce using rule 39 (exp5 -> exp6 .)


state 20

    (31) exp5 -> not . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp6                           shift and go to state 45

state 21

    (33) exp6 -> num .

    times           reduce using rule 33 (exp6 -> num .)
    divide          reduce using rule 33 (exp6 -> num .)
    mod             reduce using rule 33 (exp6 -> num .)
    plus            reduce using rule 33 (exp6 -> num .)
    minus           reduce using rule 33 (exp6 -> num .)
    and             reduce using rule 33 (exp6 -> num .)
    lt              reduce using rule 33 (exp6 -> num .)
    le              reduce using rule 33 (exp6 -> num .)
    gt              reduce using rule 33 (exp6 -> num .)
    ge              reduce using rule 33 (exp6 -> num .)
    eq              reduce using rule 33 (exp6 -> num .)
    ne              reduce using rule 33 (exp6 -> num .)
    or              reduce using rule 33 (exp6 -> num .)
    semi            reduce using rule 33 (exp6 -> num .)
    rparen          reduce using rule 33 (exp6 -> num .)
    comma           reduce using rule 33 (exp6 -> num .)


state 22

    (40) exp6 -> lparen . exp rparen
    (17) exp -> . exp1 or exp
    (34) exp -> . exp1
    (18) exp1 -> . exp2 and exp1
    (35) exp1 -> . exp2
    (19) exp2 -> . exp2 lt exp3
    (20) exp2 -> . exp2 le exp3
    (21) exp2 -> . exp2 gt exp3
    (22) exp2 -> . exp2 ge exp3
    (23) exp2 -> . exp2 eq exp3
    (24) exp2 -> . exp2 ne exp3
    (36) exp2 -> . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp                            shift and go to state 46
    exp1                           shift and go to state 13
    exp2                           shift and go to state 14
    exp3                           shift and go to state 15
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 23

    (2) stmts -> stmt stmts .

    $end            reduce using rule 2 (stmts -> stmt stmts .)
    rbracket        reduce using rule 2 (stmts -> stmt stmts .)


state 24

    (14) stmt -> type items . semi

    semi            shift and go to state 47


state 25

    (10) items -> item . comma items
    (11) items -> item .

    comma           shift and go to state 48
    semi            reduce using rule 11 (items -> item .)


state 26

    (12) item -> id .
    (13) item -> id . equals exp

    comma           reduce using rule 12 (item -> id .)
    semi            reduce using rule 12 (item -> id .)
    equals          shift and go to state 49


state 27

    (15) stmt -> id equals . exp semi
    (17) exp -> . exp1 or exp
    (34) exp -> . exp1
    (18) exp1 -> . exp2 and exp1
    (35) exp1 -> . exp2
    (19) exp2 -> . exp2 lt exp3
    (20) exp2 -> . exp2 le exp3
    (21) exp2 -> . exp2 gt exp3
    (22) exp2 -> . exp2 ge exp3
    (23) exp2 -> . exp2 eq exp3
    (24) exp2 -> . exp2 ne exp3
    (36) exp2 -> . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp                            shift and go to state 50
    exp1                           shift and go to state 13
    exp2                           shift and go to state 14
    exp3                           shift and go to state 15
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 28

    (16) stmt -> exp semi .

    id              reduce using rule 16 (stmt -> exp semi .)
    lbracket        reduce using rule 16 (stmt -> exp semi .)
    int             reduce using rule 16 (stmt -> exp semi .)
    string          reduce using rule 16 (stmt -> exp semi .)
    boolean         reduce using rule 16 (stmt -> exp semi .)
    void            reduce using rule 16 (stmt -> exp semi .)
    minus           reduce using rule 16 (stmt -> exp semi .)
    not             reduce using rule 16 (stmt -> exp semi .)
    num             reduce using rule 16 (stmt -> exp semi .)
    lparen          reduce using rule 16 (stmt -> exp semi .)
    $end            reduce using rule 16 (stmt -> exp semi .)
    rbracket        reduce using rule 16 (stmt -> exp semi .)


state 29

    (4) block -> lbracket stmts . rbracket

    rbracket        shift and go to state 51


state 30

    (17) exp -> exp1 or . exp
    (17) exp -> . exp1 or exp
    (34) exp -> . exp1
    (18) exp1 -> . exp2 and exp1
    (35) exp1 -> . exp2
    (19) exp2 -> . exp2 lt exp3
    (20) exp2 -> . exp2 le exp3
    (21) exp2 -> . exp2 gt exp3
    (22) exp2 -> . exp2 ge exp3
    (23) exp2 -> . exp2 eq exp3
    (24) exp2 -> . exp2 ne exp3
    (36) exp2 -> . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp1                           shift and go to state 13
    exp                            shift and go to state 52
    exp2                           shift and go to state 14
    exp3                           shift and go to state 15
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 31

    (18) exp1 -> exp2 and . exp1
    (18) exp1 -> . exp2 and exp1
    (35) exp1 -> . exp2
    (19) exp2 -> . exp2 lt exp3
    (20) exp2 -> . exp2 le exp3
    (21) exp2 -> . exp2 gt exp3
    (22) exp2 -> . exp2 ge exp3
    (23) exp2 -> . exp2 eq exp3
    (24) exp2 -> . exp2 ne exp3
    (36) exp2 -> . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp2                           shift and go to state 14
    exp1                           shift and go to state 53
    exp3                           shift and go to state 15
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 32

    (19) exp2 -> exp2 lt . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp3                           shift and go to state 54
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 33

    (20) exp2 -> exp2 le . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp3                           shift and go to state 55
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 34

    (21) exp2 -> exp2 gt . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp3                           shift and go to state 56
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 35

    (22) exp2 -> exp2 ge . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp3                           shift and go to state 57
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 36

    (23) exp2 -> exp2 eq . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp3                           shift and go to state 58
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 37

    (24) exp2 -> exp2 ne . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp3                           shift and go to state 59
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 38

    (25) exp3 -> exp3 plus . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp4                           shift and go to state 60
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 39

    (26) exp3 -> exp3 minus . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp4                           shift and go to state 61
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 40

    (27) exp4 -> exp4 times . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp5                           shift and go to state 62
    exp6                           shift and go to state 19

state 41

    (28) exp4 -> exp4 divide . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp5                           shift and go to state 63
    exp6                           shift and go to state 19

state 42

    (29) exp4 -> exp4 mod . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp5                           shift and go to state 64
    exp6                           shift and go to state 19

state 43

    (30) exp5 -> minus exp6 .

    times           reduce using rule 30 (exp5 -> minus exp6 .)
    divide          reduce using rule 30 (exp5 -> minus exp6 .)
    mod             reduce using rule 30 (exp5 -> minus exp6 .)
    plus            reduce using rule 30 (exp5 -> minus exp6 .)
    minus           reduce using rule 30 (exp5 -> minus exp6 .)
    and             reduce using rule 30 (exp5 -> minus exp6 .)
    lt              reduce using rule 30 (exp5 -> minus exp6 .)
    le              reduce using rule 30 (exp5 -> minus exp6 .)
    gt              reduce using rule 30 (exp5 -> minus exp6 .)
    ge              reduce using rule 30 (exp5 -> minus exp6 .)
    eq              reduce using rule 30 (exp5 -> minus exp6 .)
    ne              reduce using rule 30 (exp5 -> minus exp6 .)
    or              reduce using rule 30 (exp5 -> minus exp6 .)
    semi            reduce using rule 30 (exp5 -> minus exp6 .)
    rparen          reduce using rule 30 (exp5 -> minus exp6 .)
    comma           reduce using rule 30 (exp5 -> minus exp6 .)


state 44

    (32) exp6 -> id .

    times           reduce using rule 32 (exp6 -> id .)
    divide          reduce using rule 32 (exp6 -> id .)
    mod             reduce using rule 32 (exp6 -> id .)
    plus            reduce using rule 32 (exp6 -> id .)
    minus           reduce using rule 32 (exp6 -> id .)
    and             reduce using rule 32 (exp6 -> id .)
    lt              reduce using rule 32 (exp6 -> id .)
    le              reduce using rule 32 (exp6 -> id .)
    gt              reduce using rule 32 (exp6 -> id .)
    ge              reduce using rule 32 (exp6 -> id .)
    eq              reduce using rule 32 (exp6 -> id .)
    ne              reduce using rule 32 (exp6 -> id .)
    or              reduce using rule 32 (exp6 -> id .)
    semi            reduce using rule 32 (exp6 -> id .)
    rparen          reduce using rule 32 (exp6 -> id .)
    comma           reduce using rule 32 (exp6 -> id .)


state 45

    (31) exp5 -> not exp6 .

    times           reduce using rule 31 (exp5 -> not exp6 .)
    divide          reduce using rule 31 (exp5 -> not exp6 .)
    mod             reduce using rule 31 (exp5 -> not exp6 .)
    plus            reduce using rule 31 (exp5 -> not exp6 .)
    minus           reduce using rule 31 (exp5 -> not exp6 .)
    and             reduce using rule 31 (exp5 -> not exp6 .)
    lt              reduce using rule 31 (exp5 -> not exp6 .)
    le              reduce using rule 31 (exp5 -> not exp6 .)
    gt              reduce using rule 31 (exp5 -> not exp6 .)
    ge              reduce using rule 31 (exp5 -> not exp6 .)
    eq              reduce using rule 31 (exp5 -> not exp6 .)
    ne              reduce using rule 31 (exp5 -> not exp6 .)
    or              reduce using rule 31 (exp5 -> not exp6 .)
    semi            reduce using rule 31 (exp5 -> not exp6 .)
    rparen          reduce using rule 31 (exp5 -> not exp6 .)
    comma           reduce using rule 31 (exp5 -> not exp6 .)


state 46

    (40) exp6 -> lparen exp . rparen

    rparen          shift and go to state 65


state 47

    (14) stmt -> type items semi .

    id              reduce using rule 14 (stmt -> type items semi .)
    lbracket        reduce using rule 14 (stmt -> type items semi .)
    int             reduce using rule 14 (stmt -> type items semi .)
    string          reduce using rule 14 (stmt -> type items semi .)
    boolean         reduce using rule 14 (stmt -> type items semi .)
    void            reduce using rule 14 (stmt -> type items semi .)
    minus           reduce using rule 14 (stmt -> type items semi .)
    not             reduce using rule 14 (stmt -> type items semi .)
    num             reduce using rule 14 (stmt -> type items semi .)
    lparen          reduce using rule 14 (stmt -> type items semi .)
    $end            reduce using rule 14 (stmt -> type items semi .)
    rbracket        reduce using rule 14 (stmt -> type items semi .)


state 48

    (10) items -> item comma . items
    (10) items -> . item comma items
    (11) items -> . item
    (12) item -> . id
    (13) item -> . id equals exp

    id              shift and go to state 26

    item                           shift and go to state 25
    items                          shift and go to state 66

state 49

    (13) item -> id equals . exp
    (17) exp -> . exp1 or exp
    (34) exp -> . exp1
    (18) exp1 -> . exp2 and exp1
    (35) exp1 -> . exp2
    (19) exp2 -> . exp2 lt exp3
    (20) exp2 -> . exp2 le exp3
    (21) exp2 -> . exp2 gt exp3
    (22) exp2 -> . exp2 ge exp3
    (23) exp2 -> . exp2 eq exp3
    (24) exp2 -> . exp2 ne exp3
    (36) exp2 -> . exp3
    (25) exp3 -> . exp3 plus exp4
    (26) exp3 -> . exp3 minus exp4
    (37) exp3 -> . exp4
    (27) exp4 -> . exp4 times exp5
    (28) exp4 -> . exp4 divide exp5
    (29) exp4 -> . exp4 mod exp5
    (38) exp4 -> . exp5
    (30) exp5 -> . minus exp6
    (31) exp5 -> . not exp6
    (39) exp5 -> . exp6
    (32) exp6 -> . id
    (33) exp6 -> . num
    (40) exp6 -> . lparen exp rparen

    minus           shift and go to state 17
    not             shift and go to state 20
    id              shift and go to state 44
    num             shift and go to state 21
    lparen          shift and go to state 22

    exp                            shift and go to state 67
    exp1                           shift and go to state 13
    exp2                           shift and go to state 14
    exp3                           shift and go to state 15
    exp4                           shift and go to state 16
    exp5                           shift and go to state 18
    exp6                           shift and go to state 19

state 50

    (15) stmt -> id equals exp . semi

    semi            shift and go to state 68


state 51

    (4) block -> lbracket stmts rbracket .

    id              reduce using rule 4 (block -> lbracket stmts rbracket .)
    lbracket        reduce using rule 4 (block -> lbracket stmts rbracket .)
    int             reduce using rule 4 (block -> lbracket stmts rbracket .)
    string          reduce using rule 4 (block -> lbracket stmts rbracket .)
    boolean         reduce using rule 4 (block -> lbracket stmts rbracket .)
    void            reduce using rule 4 (block -> lbracket stmts rbracket .)
    minus           reduce using rule 4 (block -> lbracket stmts rbracket .)
    not             reduce using rule 4 (block -> lbracket stmts rbracket .)
    num             reduce using rule 4 (block -> lbracket stmts rbracket .)
    lparen          reduce using rule 4 (block -> lbracket stmts rbracket .)
    $end            reduce using rule 4 (block -> lbracket stmts rbracket .)
    rbracket        reduce using rule 4 (block -> lbracket stmts rbracket .)


state 52

    (17) exp -> exp1 or exp .

    semi            reduce using rule 17 (exp -> exp1 or exp .)
    rparen          reduce using rule 17 (exp -> exp1 or exp .)
    comma           reduce using rule 17 (exp -> exp1 or exp .)


state 53

    (18) exp1 -> exp2 and exp1 .

    or              reduce using rule 18 (exp1 -> exp2 and exp1 .)
    semi            reduce using rule 18 (exp1 -> exp2 and exp1 .)
    rparen          reduce using rule 18 (exp1 -> exp2 and exp1 .)
    comma           reduce using rule 18 (exp1 -> exp2 and exp1 .)


state 54

    (19) exp2 -> exp2 lt exp3 .
    (25) exp3 -> exp3 . plus exp4
    (26) exp3 -> exp3 . minus exp4

    and             reduce using rule 19 (exp2 -> exp2 lt exp3 .)
    lt              reduce using rule 19 (exp2 -> exp2 lt exp3 .)
    le              reduce using rule 19 (exp2 -> exp2 lt exp3 .)
    gt              reduce using rule 19 (exp2 -> exp2 lt exp3 .)
    ge              reduce using rule 19 (exp2 -> exp2 lt exp3 .)
    eq              reduce using rule 19 (exp2 -> exp2 lt exp3 .)
    ne              reduce using rule 19 (exp2 -> exp2 lt exp3 .)
    or              reduce using rule 19 (exp2 -> exp2 lt exp3 .)
    semi            reduce using rule 19 (exp2 -> exp2 lt exp3 .)
    rparen          reduce using rule 19 (exp2 -> exp2 lt exp3 .)
    comma           reduce using rule 19 (exp2 -> exp2 lt exp3 .)
    plus            shift and go to state 38
    minus           shift and go to state 39


state 55

    (20) exp2 -> exp2 le exp3 .
    (25) exp3 -> exp3 . plus exp4
    (26) exp3 -> exp3 . minus exp4

    and             reduce using rule 20 (exp2 -> exp2 le exp3 .)
    lt              reduce using rule 20 (exp2 -> exp2 le exp3 .)
    le              reduce using rule 20 (exp2 -> exp2 le exp3 .)
    gt              reduce using rule 20 (exp2 -> exp2 le exp3 .)
    ge              reduce using rule 20 (exp2 -> exp2 le exp3 .)
    eq              reduce using rule 20 (exp2 -> exp2 le exp3 .)
    ne              reduce using rule 20 (exp2 -> exp2 le exp3 .)
    or              reduce using rule 20 (exp2 -> exp2 le exp3 .)
    semi            reduce using rule 20 (exp2 -> exp2 le exp3 .)
    rparen          reduce using rule 20 (exp2 -> exp2 le exp3 .)
    comma           reduce using rule 20 (exp2 -> exp2 le exp3 .)
    plus            shift and go to state 38
    minus           shift and go to state 39


state 56

    (21) exp2 -> exp2 gt exp3 .
    (25) exp3 -> exp3 . plus exp4
    (26) exp3 -> exp3 . minus exp4

    and             reduce using rule 21 (exp2 -> exp2 gt exp3 .)
    lt              reduce using rule 21 (exp2 -> exp2 gt exp3 .)
    le              reduce using rule 21 (exp2 -> exp2 gt exp3 .)
    gt              reduce using rule 21 (exp2 -> exp2 gt exp3 .)
    ge              reduce using rule 21 (exp2 -> exp2 gt exp3 .)
    eq              reduce using rule 21 (exp2 -> exp2 gt exp3 .)
    ne              reduce using rule 21 (exp2 -> exp2 gt exp3 .)
    or              reduce using rule 21 (exp2 -> exp2 gt exp3 .)
    semi            reduce using rule 21 (exp2 -> exp2 gt exp3 .)
    rparen          reduce using rule 21 (exp2 -> exp2 gt exp3 .)
    comma           reduce using rule 21 (exp2 -> exp2 gt exp3 .)
    plus            shift and go to state 38
    minus           shift and go to state 39


state 57

    (22) exp2 -> exp2 ge exp3 .
    (25) exp3 -> exp3 . plus exp4
    (26) exp3 -> exp3 . minus exp4

    and             reduce using rule 22 (exp2 -> exp2 ge exp3 .)
    lt              reduce using rule 22 (exp2 -> exp2 ge exp3 .)
    le              reduce using rule 22 (exp2 -> exp2 ge exp3 .)
    gt              reduce using rule 22 (exp2 -> exp2 ge exp3 .)
    ge              reduce using rule 22 (exp2 -> exp2 ge exp3 .)
    eq              reduce using rule 22 (exp2 -> exp2 ge exp3 .)
    ne              reduce using rule 22 (exp2 -> exp2 ge exp3 .)
    or              reduce using rule 22 (exp2 -> exp2 ge exp3 .)
    semi            reduce using rule 22 (exp2 -> exp2 ge exp3 .)
    rparen          reduce using rule 22 (exp2 -> exp2 ge exp3 .)
    comma           reduce using rule 22 (exp2 -> exp2 ge exp3 .)
    plus            shift and go to state 38
    minus           shift and go to state 39


state 58

    (23) exp2 -> exp2 eq exp3 .
    (25) exp3 -> exp3 . plus exp4
    (26) exp3 -> exp3 . minus exp4

    and             reduce using rule 23 (exp2 -> exp2 eq exp3 .)
    lt              reduce using rule 23 (exp2 -> exp2 eq exp3 .)
    le              reduce using rule 23 (exp2 -> exp2 eq exp3 .)
    gt              reduce using rule 23 (exp2 -> exp2 eq exp3 .)
    ge              reduce using rule 23 (exp2 -> exp2 eq exp3 .)
    eq              reduce using rule 23 (exp2 -> exp2 eq exp3 .)
    ne              reduce using rule 23 (exp2 -> exp2 eq exp3 .)
    or              reduce using rule 23 (exp2 -> exp2 eq exp3 .)
    semi            reduce using rule 23 (exp2 -> exp2 eq exp3 .)
    rparen          reduce using rule 23 (exp2 -> exp2 eq exp3 .)
    comma           reduce using rule 23 (exp2 -> exp2 eq exp3 .)
    plus            shift and go to state 38
    minus           shift and go to state 39


state 59

    (24) exp2 -> exp2 ne exp3 .
    (25) exp3 -> exp3 . plus exp4
    (26) exp3 -> exp3 . minus exp4

    and             reduce using rule 24 (exp2 -> exp2 ne exp3 .)
    lt              reduce using rule 24 (exp2 -> exp2 ne exp3 .)
    le              reduce using rule 24 (exp2 -> exp2 ne exp3 .)
    gt              reduce using rule 24 (exp2 -> exp2 ne exp3 .)
    ge              reduce using rule 24 (exp2 -> exp2 ne exp3 .)
    eq              reduce using rule 24 (exp2 -> exp2 ne exp3 .)
    ne              reduce using rule 24 (exp2 -> exp2 ne exp3 .)
    or              reduce using rule 24 (exp2 -> exp2 ne exp3 .)
    semi            reduce using rule 24 (exp2 -> exp2 ne exp3 .)
    rparen          reduce using rule 24 (exp2 -> exp2 ne exp3 .)
    comma           reduce using rule 24 (exp2 -> exp2 ne exp3 .)
    plus            shift and go to state 38
    minus           shift and go to state 39


state 60

    (25) exp3 -> exp3 plus exp4 .
    (27) exp4 -> exp4 . times exp5
    (28) exp4 -> exp4 . divide exp5
    (29) exp4 -> exp4 . mod exp5

    plus            reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    minus           reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    and             reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    lt              reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    le              reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    gt              reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    ge              reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    eq              reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    ne              reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    or              reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    semi            reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    rparen          reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    comma           reduce using rule 25 (exp3 -> exp3 plus exp4 .)
    times           shift and go to state 40
    divide          shift and go to state 41
    mod             shift and go to state 42


state 61

    (26) exp3 -> exp3 minus exp4 .
    (27) exp4 -> exp4 . times exp5
    (28) exp4 -> exp4 . divide exp5
    (29) exp4 -> exp4 . mod exp5

    plus            reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    minus           reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    and             reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    lt              reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    le              reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    gt              reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    ge              reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    eq              reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    ne              reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    or              reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    semi            reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    rparen          reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    comma           reduce using rule 26 (exp3 -> exp3 minus exp4 .)
    times           shift and go to state 40
    divide          shift and go to state 41
    mod             shift and go to state 42


state 62

    (27) exp4 -> exp4 times exp5 .

    times           reduce using rule 27 (exp4 -> exp4 times exp5 .)
    divide          reduce using rule 27 (exp4 -> exp4 times exp5 .)
    mod             reduce using rule 27 (exp4 -> exp4 times exp5 .)
    plus            reduce using rule 27 (exp4 -> exp4 times exp5 .)
    minus           reduce using rule 27 (exp4 -> exp4 times exp5 .)
    and             reduce using rule 27 (exp4 -> exp4 times exp5 .)
    lt              reduce using rule 27 (exp4 -> exp4 times exp5 .)
    le              reduce using rule 27 (exp4 -> exp4 times exp5 .)
    gt              reduce using rule 27 (exp4 -> exp4 times exp5 .)
    ge              reduce using rule 27 (exp4 -> exp4 times exp5 .)
    eq              reduce using rule 27 (exp4 -> exp4 times exp5 .)
    ne              reduce using rule 27 (exp4 -> exp4 times exp5 .)
    or              reduce using rule 27 (exp4 -> exp4 times exp5 .)
    semi            reduce using rule 27 (exp4 -> exp4 times exp5 .)
    rparen          reduce using rule 27 (exp4 -> exp4 times exp5 .)
    comma           reduce using rule 27 (exp4 -> exp4 times exp5 .)


state 63

    (28) exp4 -> exp4 divide exp5 .

    times           reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    divide          reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    mod             reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    plus            reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    minus           reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    and             reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    lt              reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    le              reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    gt              reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    ge              reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    eq              reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    ne              reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    or              reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    semi            reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    rparen          reduce using rule 28 (exp4 -> exp4 divide exp5 .)
    comma           reduce using rule 28 (exp4 -> exp4 divide exp5 .)


state 64

    (29) exp4 -> exp4 mod exp5 .

    times           reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    divide          reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    mod             reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    plus            reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    minus           reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    and             reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    lt              reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    le              reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    gt              reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    ge              reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    eq              reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    ne              reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    or              reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    semi            reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    rparen          reduce using rule 29 (exp4 -> exp4 mod exp5 .)
    comma           reduce using rule 29 (exp4 -> exp4 mod exp5 .)


state 65

    (40) exp6 -> lparen exp rparen .

    times           reduce using rule 40 (exp6 -> lparen exp rparen .)
    divide          reduce using rule 40 (exp6 -> lparen exp rparen .)
    mod             reduce using rule 40 (exp6 -> lparen exp rparen .)
    plus            reduce using rule 40 (exp6 -> lparen exp rparen .)
    minus           reduce using rule 40 (exp6 -> lparen exp rparen .)
    and             reduce using rule 40 (exp6 -> lparen exp rparen .)
    lt              reduce using rule 40 (exp6 -> lparen exp rparen .)
    le              reduce using rule 40 (exp6 -> lparen exp rparen .)
    gt              reduce using rule 40 (exp6 -> lparen exp rparen .)
    ge              reduce using rule 40 (exp6 -> lparen exp rparen .)
    eq              reduce using rule 40 (exp6 -> lparen exp rparen .)
    ne              reduce using rule 40 (exp6 -> lparen exp rparen .)
    or              reduce using rule 40 (exp6 -> lparen exp rparen .)
    semi            reduce using rule 40 (exp6 -> lparen exp rparen .)
    rparen          reduce using rule 40 (exp6 -> lparen exp rparen .)
    comma           reduce using rule 40 (exp6 -> lparen exp rparen .)


state 66

    (10) items -> item comma items .

    semi            reduce using rule 10 (items -> item comma items .)


state 67

    (13) item -> id equals exp .

    comma           reduce using rule 13 (item -> id equals exp .)
    semi            reduce using rule 13 (item -> id equals exp .)


state 68

    (15) stmt -> id equals exp semi .

    id              reduce using rule 15 (stmt -> id equals exp semi .)
    lbracket        reduce using rule 15 (stmt -> id equals exp semi .)
    int             reduce using rule 15 (stmt -> id equals exp semi .)
    string          reduce using rule 15 (stmt -> id equals exp semi .)
    boolean         reduce using rule 15 (stmt -> id equals exp semi .)
    void            reduce using rule 15 (stmt -> id equals exp semi .)
    minus           reduce using rule 15 (stmt -> id equals exp semi .)
    not             reduce using rule 15 (stmt -> id equals exp semi .)
    num             reduce using rule 15 (stmt -> id equals exp semi .)
    lparen          reduce using rule 15 (stmt -> id equals exp semi .)
    $end            reduce using rule 15 (stmt -> id equals exp semi .)
    rbracket        reduce using rule 15 (stmt -> id equals exp semi .)

