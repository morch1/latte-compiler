
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightorrightandleftltlegtgeeqneleftplusminuslefttimesdividemodrightnotuminusand comma divide else eq equals false ge gt id if intconst lbrace le lparen lt minus minusminus mod ne not or plus plusplus rbrace return rparen semi stringconst times true whileprogram : topdefstopdefs : topdef topdefstopdefs : topdef : type id lparen args rparen blockargs : arg comma argsargs : argargs : arg : type idstmts : stmt stmtsstmts : block : lbrace stmts rbracestmt : semistmt : blockstmt : type items semiitems : item comma items items : itemitem : iditem : id equals expstmt : id equals exp semistmt : id plusplus semistmt : id minusminus semistmt : return exp semistmt : return semistmt : if lparen exp rparen stmtstmt : if lparen exp rparen stmt else stmtstmt : while lparen exp rparen stmtstmt : exp semitype : idexps : exp comma exps exps : expexps : exp : exp or exp\n           | exp and exp\n           | exp lt exp\n           | exp le exp\n           | exp gt exp\n           | exp ge exp\n           | exp eq exp\n           | exp ne exp\n           | exp plus exp\n           | exp minus exp\n           | exp times exp\n           | exp divide exp\n           | exp mod exp exp : minus exp %prec uminus\n           | not expexp : idexp : intconstexp : stringconstexp : true\n           | falseexp : id lparen exps rparen'
    
_lr_action_items = {'$end':([0,1,2,3,6,15,34,],[-3,0,-1,-3,-2,-4,-11,]),'id':([0,3,4,5,8,9,14,15,16,19,20,21,22,23,25,28,29,34,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,64,65,66,68,69,85,90,92,93,94,96,97,98,99,],[5,5,7,-28,5,12,5,-4,23,23,-12,-13,38,-28,59,59,59,-11,59,59,-27,59,59,59,59,59,59,59,59,59,59,59,59,59,-23,59,59,-14,38,59,-20,-21,-22,-19,59,23,23,-24,-26,23,-25,]),'lparen':([7,23,26,27,59,],[8,42,60,61,42,]),'rparen':([8,10,11,12,14,17,30,31,32,33,42,59,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,91,92,95,],[-7,13,-6,-8,-7,-5,-48,-49,-50,-51,-31,-47,-45,-46,91,-30,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,93,94,-52,-31,-29,]),'comma':([11,12,30,31,32,33,37,38,59,62,63,71,72,73,74,75,76,77,78,79,80,81,82,83,84,89,91,],[14,-8,-48,-49,-50,-51,65,-17,-47,-45,-46,92,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-18,-52,]),'lbrace':([13,16,19,20,21,34,43,58,64,68,69,85,90,93,94,96,97,98,99,],[16,16,16,-12,-13,-11,-27,-23,-14,-20,-21,-22,-19,16,16,-24,-26,16,-25,]),'rbrace':([16,18,19,20,21,34,35,43,58,64,68,69,85,90,96,97,99,],[-10,34,-10,-12,-13,-11,-9,-27,-23,-14,-20,-21,-22,-19,-24,-26,-25,]),'semi':([16,19,20,21,23,24,25,30,31,32,33,34,36,37,38,40,41,43,57,58,59,62,63,64,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,91,93,94,96,97,98,99,],[20,20,-12,-13,-47,43,58,-48,-49,-50,-51,-11,64,-16,-17,68,69,-27,85,-23,-47,-45,-46,-14,90,-20,-21,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-22,-15,-18,-19,-52,20,20,-24,-26,20,-25,]),'return':([16,19,20,21,34,43,58,64,68,69,85,90,93,94,96,97,98,99,],[25,25,-12,-13,-11,-27,-23,-14,-20,-21,-22,-19,25,25,-24,-26,25,-25,]),'if':([16,19,20,21,34,43,58,64,68,69,85,90,93,94,96,97,98,99,],[26,26,-12,-13,-11,-27,-23,-14,-20,-21,-22,-19,26,26,-24,-26,26,-25,]),'while':([16,19,20,21,34,43,58,64,68,69,85,90,93,94,96,97,98,99,],[27,27,-12,-13,-11,-27,-23,-14,-20,-21,-22,-19,27,27,-24,-26,27,-25,]),'minus':([16,19,20,21,23,24,25,28,29,30,31,32,33,34,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,93,94,96,97,98,99,],[28,28,-12,-13,-47,53,28,28,28,-48,-49,-50,-51,-11,28,28,-27,28,28,28,28,28,28,28,28,28,28,28,28,28,53,-23,-47,28,28,-45,-46,-14,28,53,-20,-21,53,53,53,53,53,53,53,53,53,-40,-41,-42,-43,-44,-22,53,53,53,-19,-52,28,28,28,-24,-26,28,-25,]),'not':([16,19,20,21,25,28,29,34,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,64,66,68,69,85,90,92,93,94,96,97,98,99,],[29,29,-12,-13,29,29,29,-11,29,29,-27,29,29,29,29,29,29,29,29,29,29,29,29,29,-23,29,29,-14,29,-20,-21,-22,-19,29,29,29,-24,-26,29,-25,]),'intconst':([16,19,20,21,25,28,29,34,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,64,66,68,69,85,90,92,93,94,96,97,98,99,],[30,30,-12,-13,30,30,30,-11,30,30,-27,30,30,30,30,30,30,30,30,30,30,30,30,30,-23,30,30,-14,30,-20,-21,-22,-19,30,30,30,-24,-26,30,-25,]),'stringconst':([16,19,20,21,25,28,29,34,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,64,66,68,69,85,90,92,93,94,96,97,98,99,],[31,31,-12,-13,31,31,31,-11,31,31,-27,31,31,31,31,31,31,31,31,31,31,31,31,31,-23,31,31,-14,31,-20,-21,-22,-19,31,31,31,-24,-26,31,-25,]),'true':([16,19,20,21,25,28,29,34,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,64,66,68,69,85,90,92,93,94,96,97,98,99,],[32,32,-12,-13,32,32,32,-11,32,32,-27,32,32,32,32,32,32,32,32,32,32,32,32,32,-23,32,32,-14,32,-20,-21,-22,-19,32,32,32,-24,-26,32,-25,]),'false':([16,19,20,21,25,28,29,34,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,64,66,68,69,85,90,92,93,94,96,97,98,99,],[33,33,-12,-13,33,33,33,-11,33,33,-27,33,33,33,33,33,33,33,33,33,33,33,33,33,-23,33,33,-14,33,-20,-21,-22,-19,33,33,33,-24,-26,33,-25,]),'else':([20,21,34,43,58,64,68,69,85,90,96,97,99,],[-12,-13,-11,-27,-23,-14,-20,-21,-22,-19,98,-26,-25,]),'equals':([23,38,],[39,66,]),'plusplus':([23,],[40,]),'minusminus':([23,],[41,]),'or':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,44,-48,-49,-50,-51,44,-47,-45,-46,44,44,44,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,44,44,44,-52,]),'and':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,45,-48,-49,-50,-51,45,-47,-45,-46,45,45,45,45,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,45,45,45,-52,]),'lt':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,46,-48,-49,-50,-51,46,-47,-45,-46,46,46,46,46,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,46,46,46,-52,]),'le':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,47,-48,-49,-50,-51,47,-47,-45,-46,47,47,47,47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,47,47,47,-52,]),'gt':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,48,-48,-49,-50,-51,48,-47,-45,-46,48,48,48,48,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,48,48,48,-52,]),'ge':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,49,-48,-49,-50,-51,49,-47,-45,-46,49,49,49,49,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,49,49,49,-52,]),'eq':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,50,-48,-49,-50,-51,50,-47,-45,-46,50,50,50,50,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,50,50,50,-52,]),'ne':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,51,-48,-49,-50,-51,51,-47,-45,-46,51,51,51,51,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,51,51,51,-52,]),'plus':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,52,-48,-49,-50,-51,52,-47,-45,-46,52,52,52,52,52,52,52,52,52,52,-40,-41,-42,-43,-44,52,52,52,-52,]),'times':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,54,-48,-49,-50,-51,54,-47,-45,-46,54,54,54,54,54,54,54,54,54,54,54,54,-42,-43,-44,54,54,54,-52,]),'divide':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,55,-48,-49,-50,-51,55,-47,-45,-46,55,55,55,55,55,55,55,55,55,55,55,55,-42,-43,-44,55,55,55,-52,]),'mod':([23,24,30,31,32,33,57,59,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,],[-47,56,-48,-49,-50,-51,56,-47,-45,-46,56,56,56,56,56,56,56,56,56,56,56,56,-42,-43,-44,56,56,56,-52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'topdefs':([0,3,],[2,6,]),'topdef':([0,3,],[3,3,]),'type':([0,3,8,14,16,19,93,94,98,],[4,4,9,9,22,22,22,22,22,]),'args':([8,14,],[10,17,]),'arg':([8,14,],[11,11,]),'block':([13,16,19,93,94,98,],[15,21,21,21,21,21,]),'stmts':([16,19,],[18,35,]),'stmt':([16,19,93,94,98,],[19,19,96,97,99,]),'exp':([16,19,25,28,29,39,42,44,45,46,47,48,49,50,51,52,53,54,55,56,60,61,66,92,93,94,98,],[24,24,57,62,63,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,71,24,24,24,]),'items':([22,65,],[36,88,]),'item':([22,65,],[37,37,]),'exps':([42,92,],[70,95,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> topdefs','program',1,'p_program','parse.py',13),
  ('topdefs -> topdef topdefs','topdefs',2,'p_topdefs','parse.py',17),
  ('topdefs -> <empty>','topdefs',0,'p_topdefs_empty','parse.py',21),
  ('topdef -> type id lparen args rparen block','topdef',6,'p_topdef','parse.py',25),
  ('args -> arg comma args','args',3,'p_args','parse.py',29),
  ('args -> arg','args',1,'p_args_one','parse.py',33),
  ('args -> <empty>','args',0,'p_args_empty','parse.py',37),
  ('arg -> type id','arg',2,'p_arg','parse.py',41),
  ('stmts -> stmt stmts','stmts',2,'p_stmts','parse.py',46),
  ('stmts -> <empty>','stmts',0,'p_stmts_empty','parse.py',50),
  ('block -> lbrace stmts rbrace','block',3,'p_block','parse.py',54),
  ('stmt -> semi','stmt',1,'p_stmt_empty','parse.py',58),
  ('stmt -> block','stmt',1,'p_stmt_block','parse.py',62),
  ('stmt -> type items semi','stmt',3,'p_stmt_decl','parse.py',66),
  ('items -> item comma items','items',3,'p_items','parse.py',70),
  ('items -> item','items',1,'p_items_one','parse.py',74),
  ('item -> id','item',1,'p_item','parse.py',78),
  ('item -> id equals exp','item',3,'p_item_init','parse.py',82),
  ('stmt -> id equals exp semi','stmt',4,'p_stmt_ass','parse.py',86),
  ('stmt -> id plusplus semi','stmt',3,'p_stmt_inc','parse.py',90),
  ('stmt -> id minusminus semi','stmt',3,'p_stmt_dec','parse.py',94),
  ('stmt -> return exp semi','stmt',3,'p_stmt_return','parse.py',98),
  ('stmt -> return semi','stmt',2,'p_stmt_void_return','parse.py',102),
  ('stmt -> if lparen exp rparen stmt','stmt',5,'p_stmt_if','parse.py',106),
  ('stmt -> if lparen exp rparen stmt else stmt','stmt',7,'p_stmt_if_else','parse.py',110),
  ('stmt -> while lparen exp rparen stmt','stmt',5,'p_stmt_while','parse.py',114),
  ('stmt -> exp semi','stmt',2,'p_stmt_exp','parse.py',118),
  ('type -> id','type',1,'p_type','parse.py',123),
  ('exps -> exp comma exps','exps',3,'p_exps','parse.py',132),
  ('exps -> exp','exps',1,'p_exps_one','parse.py',136),
  ('exps -> <empty>','exps',0,'p_exps_empty','parse.py',140),
  ('exp -> exp or exp','exp',3,'p_exp_binop','parse.py',144),
  ('exp -> exp and exp','exp',3,'p_exp_binop','parse.py',145),
  ('exp -> exp lt exp','exp',3,'p_exp_binop','parse.py',146),
  ('exp -> exp le exp','exp',3,'p_exp_binop','parse.py',147),
  ('exp -> exp gt exp','exp',3,'p_exp_binop','parse.py',148),
  ('exp -> exp ge exp','exp',3,'p_exp_binop','parse.py',149),
  ('exp -> exp eq exp','exp',3,'p_exp_binop','parse.py',150),
  ('exp -> exp ne exp','exp',3,'p_exp_binop','parse.py',151),
  ('exp -> exp plus exp','exp',3,'p_exp_binop','parse.py',152),
  ('exp -> exp minus exp','exp',3,'p_exp_binop','parse.py',153),
  ('exp -> exp times exp','exp',3,'p_exp_binop','parse.py',154),
  ('exp -> exp divide exp','exp',3,'p_exp_binop','parse.py',155),
  ('exp -> exp mod exp','exp',3,'p_exp_binop','parse.py',156),
  ('exp -> minus exp','exp',2,'p_exp_unop','parse.py',165),
  ('exp -> not exp','exp',2,'p_exp_unop','parse.py',166),
  ('exp -> id','exp',1,'p_exp_id','parse.py',175),
  ('exp -> intconst','exp',1,'p_exp_intconst','parse.py',179),
  ('exp -> stringconst','exp',1,'p_exp_stringconst','parse.py',183),
  ('exp -> true','exp',1,'p_exp_boolconst','parse.py',187),
  ('exp -> false','exp',1,'p_exp_boolconst','parse.py',188),
  ('exp -> id lparen exps rparen','exp',4,'p_exp_app','parse.py',192),
]
