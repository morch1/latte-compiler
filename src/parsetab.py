
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'and boolean comma divide else eq equals false ge gt id if int intconst lbrace le lparen lt minus minusminus mod ne not or plus plusplus rbrace return rparen semi string stringconst times true void whileprogram : topdefstopdefs : topdef topdefstopdefs : topdef : type id lparen args rparen blockargs : arg comma argsargs : arg : type idstmts : stmt stmtsstmts : block : lbrace stmts rbracestmt : semistmt : blockstmt : type items semiitems : item comma items items : itemitem : iditem : id equals expstmt : id equals exp semistmt : id plusplus semistmt : id minusminus semistmt : return exp semistmt : return semistmt : if lparen exp rparen stmtstmt : if lparen exp rparen stmt else stmtstmt : while lparen exp rparen stmtstmt : exp semitype : int\n            | string\n            | boolean\n            | voidexps : exp comma exps exps : expexps : exp : exp1 or expexp1 : exp2 and exp1exp2 : exp2 lt exp3\n            | exp2 le exp3\n            | exp2 gt exp3\n            | exp2 ge exp3\n            | exp2 eq exp3\n            | exp2 ne exp3exp3 : exp3 plus exp4\n            | exp3 minus exp4exp4 : exp4 times exp5\n            | exp4 divide exp5\n            | exp4 mod exp5exp5 : minus exp6\n            | not exp6exp6 : idexp6 : intconstexp6 : stringconstexp6 : true\n            | falseexp6 : id lparen exps rparenexp : exp1exp1 : exp2exp2 : exp3exp3 : exp4exp4 : exp5exp5 : exp6exp6 : lparen exp rparen'
    
_lr_action_items = {'$end':([0,1,2,3,9,18,44,],[-3,0,-1,-3,-2,-4,-10,]),'int':([0,3,11,17,18,19,22,23,24,44,53,55,75,79,80,83,102,105,106,108,109,110,111,],[5,5,5,5,-4,5,5,-11,-12,-10,-26,-22,-13,-19,-20,-21,-18,5,5,-23,-25,5,-24,]),'string':([0,3,11,17,18,19,22,23,24,44,53,55,75,79,80,83,102,105,106,108,109,110,111,],[6,6,6,6,-4,6,6,-11,-12,-10,-26,-22,-13,-19,-20,-21,-18,6,6,-23,-25,6,-24,]),'boolean':([0,3,11,17,18,19,22,23,24,44,53,55,75,79,80,83,102,105,106,108,109,110,111,],[7,7,7,7,-4,7,7,-11,-12,-10,-26,-22,-13,-19,-20,-21,-18,7,7,-23,-25,7,-24,]),'void':([0,3,11,17,18,19,22,23,24,44,53,55,75,79,80,83,102,105,106,108,109,110,111,],[8,8,8,8,-4,8,8,-11,-12,-10,-26,-22,-13,-19,-20,-21,-18,8,8,-23,-25,8,-24,]),'id':([4,5,6,7,8,12,19,22,23,24,25,28,30,36,39,44,49,52,53,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,79,80,83,102,104,105,106,108,109,110,111,],[10,-27,-28,-29,-30,15,26,26,-11,-12,48,56,56,56,56,-10,56,56,-26,-22,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-13,48,56,-19,-20,-21,-18,56,26,26,-23,-25,26,-24,]),'lparen':([10,19,22,23,24,26,28,29,30,31,36,39,44,49,52,53,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,77,79,80,83,102,104,105,106,108,109,110,111,],[11,30,30,-11,-12,52,30,57,30,59,30,30,-10,30,30,-26,-22,52,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-13,30,-19,-20,-21,-18,30,30,30,-23,-25,30,-24,]),'rparen':([11,13,17,20,32,33,34,35,37,38,40,41,42,43,52,56,58,73,74,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,107,],[-6,16,-6,-5,-55,-56,-57,-58,-59,-60,-50,-51,-52,-53,-33,-49,85,-47,-48,103,-32,105,-61,106,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-54,-33,-31,]),'comma':([14,15,32,33,34,35,37,38,40,41,42,43,47,48,56,73,74,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,103,],[17,-7,-55,-56,-57,-58,-59,-60,-50,-51,-52,-53,76,-16,-49,-47,-48,104,-61,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-17,-54,]),'lbrace':([16,19,22,23,24,44,53,55,75,79,80,83,102,105,106,108,109,110,111,],[19,19,19,-11,-12,-10,-26,-22,-13,-19,-20,-21,-18,19,19,-23,-25,19,-24,]),'rbrace':([19,21,22,23,24,44,45,53,55,75,79,80,83,102,108,109,111,],[-9,44,-9,-11,-12,-10,-8,-26,-22,-13,-19,-20,-21,-18,-23,-25,-24,]),'semi':([19,22,23,24,26,27,28,32,33,34,35,37,38,40,41,42,43,44,46,47,48,50,51,53,54,55,56,73,74,75,78,79,80,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,108,109,110,111,],[23,23,-11,-12,-49,53,55,-55,-56,-57,-58,-59,-60,-50,-51,-52,-53,-10,75,-15,-16,79,80,-26,83,-22,-49,-47,-48,-13,102,-19,-20,-21,-61,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-14,-17,-18,-54,23,23,-23,-25,23,-24,]),'return':([19,22,23,24,44,53,55,75,79,80,83,102,105,106,108,109,110,111,],[28,28,-11,-12,-10,-26,-22,-13,-19,-20,-21,-18,28,28,-23,-25,28,-24,]),'if':([19,22,23,24,44,53,55,75,79,80,83,102,105,106,108,109,110,111,],[29,29,-11,-12,-10,-26,-22,-13,-19,-20,-21,-18,29,29,-23,-25,29,-24,]),'while':([19,22,23,24,44,53,55,75,79,80,83,102,105,106,108,109,110,111,],[31,31,-11,-12,-10,-26,-22,-13,-19,-20,-21,-18,31,31,-23,-25,31,-24,]),'minus':([19,22,23,24,26,28,30,34,35,37,38,40,41,42,43,44,49,52,53,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,83,85,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,108,109,110,111,],[36,36,-11,-12,-49,36,36,69,-58,-59,-60,-50,-51,-52,-53,-10,36,36,-26,-22,-49,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-47,-48,-13,36,-19,-20,-21,-61,69,69,69,69,69,69,-42,-43,-44,-45,-46,-18,-54,36,36,36,-23,-25,36,-24,]),'not':([19,22,23,24,28,30,44,49,52,53,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,77,79,80,83,102,104,105,106,108,109,110,111,],[39,39,-11,-12,39,39,-10,39,39,-26,-22,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-13,39,-19,-20,-21,-18,39,39,39,-23,-25,39,-24,]),'intconst':([19,22,23,24,28,30,36,39,44,49,52,53,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,77,79,80,83,102,104,105,106,108,109,110,111,],[40,40,-11,-12,40,40,40,40,-10,40,40,-26,-22,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-13,40,-19,-20,-21,-18,40,40,40,-23,-25,40,-24,]),'stringconst':([19,22,23,24,28,30,36,39,44,49,52,53,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,77,79,80,83,102,104,105,106,108,109,110,111,],[41,41,-11,-12,41,41,41,41,-10,41,41,-26,-22,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-13,41,-19,-20,-21,-18,41,41,41,-23,-25,41,-24,]),'true':([19,22,23,24,28,30,36,39,44,49,52,53,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,77,79,80,83,102,104,105,106,108,109,110,111,],[42,42,-11,-12,42,42,42,42,-10,42,42,-26,-22,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-13,42,-19,-20,-21,-18,42,42,42,-23,-25,42,-24,]),'false':([19,22,23,24,28,30,36,39,44,49,52,53,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,77,79,80,83,102,104,105,106,108,109,110,111,],[43,43,-11,-12,43,43,43,43,-10,43,43,-26,-22,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-13,43,-19,-20,-21,-18,43,43,43,-23,-25,43,-24,]),'else':([23,24,44,53,55,75,79,80,83,102,108,109,111,],[-11,-12,-10,-26,-22,-13,-19,-20,-21,-18,110,-25,-24,]),'equals':([26,48,],[49,77,]),'plusplus':([26,],[50,]),'minusminus':([26,],[51,]),'times':([26,35,37,38,40,41,42,43,56,73,74,85,95,96,97,98,99,103,],[-49,70,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,70,70,-44,-45,-46,-54,]),'divide':([26,35,37,38,40,41,42,43,56,73,74,85,95,96,97,98,99,103,],[-49,71,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,71,71,-44,-45,-46,-54,]),'mod':([26,35,37,38,40,41,42,43,56,73,74,85,95,96,97,98,99,103,],[-49,72,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,72,72,-44,-45,-46,-54,]),'plus':([26,34,35,37,38,40,41,42,43,56,73,74,85,89,90,91,92,93,94,95,96,97,98,99,103,],[-49,68,-58,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,68,68,68,68,68,68,-42,-43,-44,-45,-46,-54,]),'and':([26,33,34,35,37,38,40,41,42,43,56,73,74,85,89,90,91,92,93,94,95,96,97,98,99,103,],[-49,61,-57,-58,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-54,]),'lt':([26,33,34,35,37,38,40,41,42,43,56,73,74,85,89,90,91,92,93,94,95,96,97,98,99,103,],[-49,62,-57,-58,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-54,]),'le':([26,33,34,35,37,38,40,41,42,43,56,73,74,85,89,90,91,92,93,94,95,96,97,98,99,103,],[-49,63,-57,-58,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-54,]),'gt':([26,33,34,35,37,38,40,41,42,43,56,73,74,85,89,90,91,92,93,94,95,96,97,98,99,103,],[-49,64,-57,-58,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-54,]),'ge':([26,33,34,35,37,38,40,41,42,43,56,73,74,85,89,90,91,92,93,94,95,96,97,98,99,103,],[-49,65,-57,-58,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-54,]),'eq':([26,33,34,35,37,38,40,41,42,43,56,73,74,85,89,90,91,92,93,94,95,96,97,98,99,103,],[-49,66,-57,-58,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-54,]),'ne':([26,33,34,35,37,38,40,41,42,43,56,73,74,85,89,90,91,92,93,94,95,96,97,98,99,103,],[-49,67,-57,-58,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-54,]),'or':([26,32,33,34,35,37,38,40,41,42,43,56,73,74,85,88,89,90,91,92,93,94,95,96,97,98,99,103,],[-49,60,-56,-57,-58,-59,-60,-50,-51,-52,-53,-49,-47,-48,-61,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'topdefs':([0,3,],[2,9,]),'topdef':([0,3,],[3,3,]),'type':([0,3,11,17,19,22,105,106,110,],[4,4,12,12,25,25,25,25,25,]),'args':([11,17,],[13,20,]),'arg':([11,17,],[14,14,]),'block':([16,19,22,105,106,110,],[18,24,24,24,24,24,]),'stmts':([19,22,],[21,45,]),'stmt':([19,22,105,106,110,],[22,22,108,109,111,]),'exp':([19,22,28,30,49,52,57,59,60,77,104,105,106,110,],[27,27,54,58,78,82,84,86,87,101,82,27,27,27,]),'exp1':([19,22,28,30,49,52,57,59,60,61,77,104,105,106,110,],[32,32,32,32,32,32,32,32,32,88,32,32,32,32,32,]),'exp2':([19,22,28,30,49,52,57,59,60,61,77,104,105,106,110,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'exp3':([19,22,28,30,49,52,57,59,60,61,62,63,64,65,66,67,77,104,105,106,110,],[34,34,34,34,34,34,34,34,34,34,89,90,91,92,93,94,34,34,34,34,34,]),'exp4':([19,22,28,30,49,52,57,59,60,61,62,63,64,65,66,67,68,69,77,104,105,106,110,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,95,96,35,35,35,35,35,]),'exp5':([19,22,28,30,49,52,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,104,105,106,110,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,97,98,99,37,37,37,37,37,]),'exp6':([19,22,28,30,36,39,49,52,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,104,105,106,110,],[38,38,38,38,73,74,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'items':([25,76,],[46,100,]),'item':([25,76,],[47,47,]),'exps':([52,104,],[81,107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> topdefs','program',1,'p_program','ins_parse.py',10),
  ('topdefs -> topdef topdefs','topdefs',2,'p_topdefs','ins_parse.py',14),
  ('topdefs -> <empty>','topdefs',0,'p_topdefs_empty','ins_parse.py',18),
  ('topdef -> type id lparen args rparen block','topdef',6,'p_topdef','ins_parse.py',22),
  ('args -> arg comma args','args',3,'p_args','ins_parse.py',26),
  ('args -> <empty>','args',0,'p_args_empty','ins_parse.py',30),
  ('arg -> type id','arg',2,'p_arg','ins_parse.py',34),
  ('stmts -> stmt stmts','stmts',2,'p_stmts','ins_parse.py',39),
  ('stmts -> <empty>','stmts',0,'p_stmts_empty','ins_parse.py',43),
  ('block -> lbrace stmts rbrace','block',3,'p_block','ins_parse.py',47),
  ('stmt -> semi','stmt',1,'p_stmt_empty','ins_parse.py',51),
  ('stmt -> block','stmt',1,'p_stmt_block','ins_parse.py',55),
  ('stmt -> type items semi','stmt',3,'p_stmt_decl','ins_parse.py',59),
  ('items -> item comma items','items',3,'p_items','ins_parse.py',63),
  ('items -> item','items',1,'p_items_one','ins_parse.py',67),
  ('item -> id','item',1,'p_item','ins_parse.py',71),
  ('item -> id equals exp','item',3,'p_item_init','ins_parse.py',75),
  ('stmt -> id equals exp semi','stmt',4,'p_stmt_ass','ins_parse.py',79),
  ('stmt -> id plusplus semi','stmt',3,'p_stmt_inc','ins_parse.py',83),
  ('stmt -> id minusminus semi','stmt',3,'p_stmt_dec','ins_parse.py',87),
  ('stmt -> return exp semi','stmt',3,'p_stmt_return','ins_parse.py',91),
  ('stmt -> return semi','stmt',2,'p_stmt_void_return','ins_parse.py',95),
  ('stmt -> if lparen exp rparen stmt','stmt',5,'p_stmt_if','ins_parse.py',99),
  ('stmt -> if lparen exp rparen stmt else stmt','stmt',7,'p_stmt_if_else','ins_parse.py',103),
  ('stmt -> while lparen exp rparen stmt','stmt',5,'p_stmt_while','ins_parse.py',107),
  ('stmt -> exp semi','stmt',2,'p_stmt_exp','ins_parse.py',111),
  ('type -> int','type',1,'p_type','ins_parse.py',116),
  ('type -> string','type',1,'p_type','ins_parse.py',117),
  ('type -> boolean','type',1,'p_type','ins_parse.py',118),
  ('type -> void','type',1,'p_type','ins_parse.py',119),
  ('exps -> exp comma exps','exps',3,'p_exps','ins_parse.py',124),
  ('exps -> exp','exps',1,'p_exps_one','ins_parse.py',128),
  ('exps -> <empty>','exps',0,'p_exps_empty','ins_parse.py',132),
  ('exp -> exp1 or exp','exp',3,'p_exp_or','ins_parse.py',136),
  ('exp1 -> exp2 and exp1','exp1',3,'p_exp_and','ins_parse.py',140),
  ('exp2 -> exp2 lt exp3','exp2',3,'p_exp_rel','ins_parse.py',144),
  ('exp2 -> exp2 le exp3','exp2',3,'p_exp_rel','ins_parse.py',145),
  ('exp2 -> exp2 gt exp3','exp2',3,'p_exp_rel','ins_parse.py',146),
  ('exp2 -> exp2 ge exp3','exp2',3,'p_exp_rel','ins_parse.py',147),
  ('exp2 -> exp2 eq exp3','exp2',3,'p_exp_rel','ins_parse.py',148),
  ('exp2 -> exp2 ne exp3','exp2',3,'p_exp_rel','ins_parse.py',149),
  ('exp3 -> exp3 plus exp4','exp3',3,'p_exp_add','ins_parse.py',153),
  ('exp3 -> exp3 minus exp4','exp3',3,'p_exp_add','ins_parse.py',154),
  ('exp4 -> exp4 times exp5','exp4',3,'p_exp_mul','ins_parse.py',158),
  ('exp4 -> exp4 divide exp5','exp4',3,'p_exp_mul','ins_parse.py',159),
  ('exp4 -> exp4 mod exp5','exp4',3,'p_exp_mul','ins_parse.py',160),
  ('exp5 -> minus exp6','exp5',2,'p_exp_neg','ins_parse.py',164),
  ('exp5 -> not exp6','exp5',2,'p_exp_neg','ins_parse.py',165),
  ('exp6 -> id','exp6',1,'p_exp_id','ins_parse.py',169),
  ('exp6 -> intconst','exp6',1,'p_exp_intconst','ins_parse.py',173),
  ('exp6 -> stringconst','exp6',1,'p_exp_stringconst','ins_parse.py',177),
  ('exp6 -> true','exp6',1,'p_exp_boolconst','ins_parse.py',181),
  ('exp6 -> false','exp6',1,'p_exp_boolconst','ins_parse.py',182),
  ('exp6 -> id lparen exps rparen','exp6',4,'p_exp_app','ins_parse.py',186),
  ('exp -> exp1','exp',1,'p_exp0','ins_parse.py',191),
  ('exp1 -> exp2','exp1',1,'p_exp1','ins_parse.py',194),
  ('exp2 -> exp3','exp2',1,'p_exp2','ins_parse.py',197),
  ('exp3 -> exp4','exp3',1,'p_exp3','ins_parse.py',200),
  ('exp4 -> exp5','exp4',1,'p_exp4','ins_parse.py',203),
  ('exp5 -> exp6','exp5',1,'p_exp5','ins_parse.py',206),
  ('exp6 -> lparen exp rparen','exp6',3,'p_exp6','ins_parse.py',209),
]
